h1. A first iteration for the data model (Scala version)

Here we will start to write the model for our blog engine.

h2. <a>Introduction to JPA</a>

The model layer has a central position in a play application (and in fact in all well designed applications). It is the domain-specific representation of the information on which the application operates. As we want to create a blog engine, the model layer will certainly contain classes like User, Post and Comment.

Because most model objects need to survive between application restarts, we have to save them in a persistent datastore. A common choice is to use a relational database. But because Java and Scala are object oriented languages, we will use an **'Object Relational Mapper'** to help reduce the impedance mismatch.

JPA is a Java specification that defines a standard API for object relational mapping. As implementation of JPA, play uses the well-known "Hibernate":http://www.hibernate.org framework. One advantage of using JPA over the standard Hibernate API is that all the 'mapping' is declared directly in the Java objects.

If you have ever used Hibernate or JPA before you will be surprised by the simplicity added by play. No need to configure anything; JPA just works out of the box with play.

If you don't know JPA, you can read "some of these simple presentations":http://java.sun.com/javaee/5/docs/tutorial/doc/bnbpz.html before continuing.

h2. <a>Starting with the User class</a>

We will start to code the blog engine by creating the User class. Create a new file **/yabe/app/models/user.scala**, and declare a first implementation of the User class:

bc. package models

import java.util._ 
import play.db.jpa._
 
@Entity
class User(
    var email: String,
    var password: String,
    var fullname: String
) extends Model {
    var isAdmin = false
}
object Users extends QueryOn[User]

If you're new to Scala then this class definition might look a bit strange. What is happening here is that the definition of 3 fields is combined with the definition of the primary constructor. Then there is a fourth field which is set to false by default.

Scala really takes care of a lot of boilerplate, here's what this code represents:

* a public class
* a public 3-argument constructor
* a public 0-argument constructor
* 4 private fields
* 4 public accessors and mutators

The **@Entity** annotation marks this class as a managed JPA entity, and the Model superclass automatically provides a set of useful JPA helpers that we will discover later. All fields of this class will be automatically persisted to the database. 

p(note). It's not required that your model objects extend the **play.db.jpa.Model** class. You can work as plain JPA as well. But extending this class is a good choice in most cases as it will ease a lot the JPA stuff.

If you have already used JPA before, you know that every JPA entity must provide an **@Id** property. Here the Model superclass provides an automatically generated numeric id, in most cases this is good enough.

p(note). Don't think about this provided **id** field as a **functional identifier** but as a **technical identifier**. It is generally a good idea to keep both concepts separated and to keep an automatically generated numeric id as technical identifier.

You can now refresh the application homepage, to see the result. In fact, unless you made a mistake, you should not see any change: play has automatically compiled and loaded the User class, but this does not provide any feature to the application.

h2. <a>Writing the first test</a>

A good way to test the newly created User class is to write a JUnit test case. It will allow to incrementally complete the application model and ensure that all is fine.

To run a test case, you need to start the application in a special 'test' mode. Stop the currently running application, open a command line and type:

bc. ~$ play test

!images/guide2-0!

The **'play test'** command is almost the same than **'play run'**, except that it loads a test runner module that allows to run test suite directly from a browser. 

p(note). When you run a play application in **test mode**, play will automatically switch to the **test** framework id and load the **application.conf** file accordingly. Check "this page":ids for more informations.

Open a browser to the "http://localhost:9000/@tests":http://localhost:9000/@tests URL to see the test runner. Try to select all the default tests and run them; all should be green... But these default tests don't really test anything.

!images/guide2-1!

To test the model part of the application we will use a ScalaTest test. As you see a default BasicTests.java already exists, so let's delete it and open **/yabe/test/BasicTest.scala** and edit it as follows,:

bc. import java.util._
import play.test._
import models._
 
import scala.collection.JavaConversions._
 
import org.scalatest.{FlatSpec,BeforeAndAfterEach}
import org.scalatest.matchers.ShouldMatchers
import scala.collection.mutable.Stack
  
class BasicTest extends UnitFlatSpec with ShouldMatchers {
  it should "a Very Important Thing To Test" in {
     2 should equal (1+1)
  }  
}


Remove the useless default test (a Very Important Thing To Test) and create a test that tries to create a new user and retrieve it:

bc. it should "create and retrieve a user" in {
        // Create a new user and save it
        new User("bob@gmail.com", "secret", "Bob").save()
 
        // Retrieve the user with bob username
        var bob = Users.find("byEmail", "bob@gmail.com").first
 
        // Test 
        bob should not be (None)
        "Bob" should equal (bob.get.fullname)
}

As you can see, the Model superclass gives us the very useful **save()** method and the QueryFunctions import gives us the **find** function.
Select **BasicTests** in the test runner, click start and check that all is green. 

We will need a method on User that checks if a user with a specified username and password exists. But in Scala, methods that don't act on a specific instance need to be defined in a companion object. Let's write it and test it.

In the **user.scala** source, add an import statement (either at the top or just before the new code), the User **object** definition and the **connect()** method:

bc. object Users extends QueryOn[User] {
    def connect(email: String, password: String) = {
        find("byEmailAndPassword", email, password).first
    }
}


And now the test case:

bc. it should "call connect on User" in {
        // Create a new user and save it
        new User("bob@gmail.com", "secret", "Bob").save()
 
        // Test 
        Users.connect("bob@gmail.com", "secret") should not be (None)
        Users.connect("bob@gmail.com", "badpassword") should be (None)
        Users.connect("tom@gmail.com", "secret") should be (None)
}

Each time you make a modification you can run all the tests from the play test runner to make sure you didn't break anything. 

h2. <a>The Post class</a>

The Post class will represent blog posts. Let's write a first implementation:

bc. package models
 
import java.util.{Date,TreeSet,Set=>JSet,List=>JList,ArrayList}
import play.db.jpa._
import play.data.Validators._
 
@Entity
class Post(
    @ManyToOne
    var author: User,
    var title: String,
    @Lob
    var content: String
) extends Model {
    var postedAt = new Date()
}
object Posts extends QueryOn[Post]

Here we use the **@Lob** annotation to tell JPA to use a large text database type to store the post content. We have declared the relation to the User class using **@ManyToOne**. That means that each Post is authored by a single User, and that each User can author several Posts.

We will write a new test case to check that the Post class works as expected. But before to write more tests, we need to do something in the JUnit class. In the current test, the database content is never deleted, each new run creating more and more objects. It will become problematic soon when more advanced test will start to count objects to check that all is fine.

So let's write a JUnit **setup()** method to delete the database before each test:

bc. class BasicTest extends UnitFlatSpec with ShouldMatchers with BeforeAndAfterEach {
 
    override def beforeEach() {
        Fixtures.deleteAll()
    }
 
    ...
 
}

As you can see, the Fixtures class is a helper to deal with your database during tests. Run the test again to check that you don't have broken anything, and start to write the next test:

bc. it should "create Post" in {
        // Create a new user and save it
        var bob = new User("bob@gmail.com", "secret", "Bob").save()
 
        // Create a new post
        new Post(bob, "My first post", "Hello world").save()
 
        // Test that the post has been created
        1 should equal (Posts.count())
 
        // Retrieve all post created by bob
        var bobPosts = Posts.find("byAuthor", bob).fetch
 
        // Tests
        1 should equal (bobPosts.size)
        var firstPost = bobPosts(0)
        firstPost should not be (null)
        bob should equal (firstPost.author)
        "My first post" should equal ( firstPost.title)
        "Hello world" should equal ( firstPost.content)
        firstPost.postedAt should not be (null)
}
    
h2. <a>Finish with Comment</a>

The last thing that we need to add at this first model draft is the ability to attach comments to posts.

The creation of the Comment class is pretty straightforward.

bc. package models
 
import java.util._
import play.db.jpa._
import play.data.Validators._
 
@Entity
class Comment(
    @ManyToOne
    var post: Post,
    var author: String,
    @Lob
    var content: String
) extends Model {
    var postedAt = new Date()
}
object Comments extends QueryOn[Comment]

Let's write a first test case:

bc. it should "post Comments" in {
        // Create a new user and save it
        var bob = new User("bob@gmail.com", "secret", "Bob").save()
 
        // Create a new post
        var bobPost = new Post(bob, "My first post", "Hello world").save()
 
        // Post a first comment
        new Comment(bobPost, "Jeff", "Nice post").save()
        new Comment(bobPost, "Tom", "I knew that !").save()
 
        // Retrieve all comments
        var bobPostComments = Comments.find("byPost", bobPost).fetch
 
        // Tests
        2 should equal (bobPostComments.size)
 
        var firstComment = bobPostComments(0)
        firstComment should not be (null)
        "Jeff" should equal ( firstComment.author)
        "Nice post" should equal ( firstComment.content)
        firstComment.postedAt should not be (null)
 
        var secondComment = bobPostComments(1)
        secondComment should not be (null)
        "Tom" should equal ( secondComment.author)
        "I knew that !" should equal ( secondComment.content)
        secondComment.postedAt should not be (null)
}

You see that the navigation between Post and Comments is not very easy: we need to use a query to retrieve all comments attached to Post. We can do better by setting up the other side of the relationship to the Post class. 

Add the comments field to the Post class:

bc. ...
    @OneToMany(mappedBy="post", cascade=Array(CascadeType.ALL))
    var comments: JList[Comment] = new ArrayList[Comment]
...

Note how we have used the **mappedBy** attribute to tell JPA that the Post class maintains the relationship. When you define bi-directional relation with JPA it is very important to tell which side will maintain the relationship. In this case, since the Comments belong to the Post it's better that the Comment class maintains the relationship.

We have set the **casacade** property to tell JPA that we want that the Post deletion be cascaded to comments. This way, if you delete a post, all related comments will be deleted as well.

With this new relationship, we will add a helper method to the Post class to simplify adding comments:

bc. def addComment(author: String, content: String) = {
    val newComment: Comment = new Comment(this, author, content).save()
    comments.add(newComment)
    this
}

Let's write another test case to check that:

bc. it should "use the comments relation" in {
        // Create a new user and save it
        var bob = new User("bob@gmail.com", "secret", "Bob").save()
 
        // Create a new post
        var bobPost = new Post(bob, "My first post", "Hello world").save()
 
        // Post a first comment
        bobPost.addComment("Jeff", "Nice post")
        bobPost.addComment("Tom", "I knew that !")
 
        // Count things
        1 should equal (Users.count())
        1 should equal (Posts.count())
        2 should equal (Comments.count())
 
        // Retrieve the bob post
        val getBobPost = Posts.find("byAuthor", bob).first
        getBobPost should not be (None)
 
        // Navigate to comments
        2  should equal (getBobPost.get.comments.size)
        "Jeff" should equal (getBobPost.get.comments(0).author)
 
        // Delete the post
        getBobPost.get.delete()
 
        // Chech the all comments have been deleted
        1 should equal (Users.count())
        0 should equal (Posts.count())
        0 should equal (Comments.count())
}


Is it green?

!images/guide2-2!

h2. <a>Using Fixtures to write more complicated test</a>

When you start to write more complex tests, you often need a set of data to test on. Fixtures lets you describe your model in a YAML file and load it at any time before a test.

Edit the **/yabe/test/data.yml** file and start to describe a User:

bc. 
User(bob):
    email: bob@gmail.com
    password: secret
    fullname: Bob
 
...
 

Well, because the data.yml file is a litle big, you can "download it here":files/data.yml.

data.yml includes date data like '2009-06-06', so you should confirm that conf/application.conf inclues the following line,

date.format=yyyy-MM-dd

Now we create create a test case that loads this data and run some assertions over it:

bc. it should "work if things combined together" in {
        Fixtures.load("data.yml")
 
        // Count things
        2 should equal (Users.count())
        3 should equal (Posts.count())
        3 should equal (Comments.count())
 
        // Try to connect as users
        Users.connect("bob@gmail.com", "secret") should not be (None)
        Users.connect("jeff@gmail.com", "secret") should not be (None)
        Users.connect("jeff@gmail.com", "badpassword") should be (None)
        Users.connect("tom@gmail.com", "secret") should be (None)
 
        // Find all bob posts
        var bobPosts = Posts.find("author.email", "bob@gmail.com").fetch
        2 should equal (bobPosts.size)
 
        // Find all comments related to bob posts
        var bobComments = Comments.find("post.author.email", "bob@gmail.com").fetch
        3 should equal (bobComments.size)
 
        // Find the most recent post
        var frontPost = Posts.find("order by postedAt desc").first
 
        frontPost should not be (None)
        "About the model layer" should equal (frontPost.get.title)
 
        // Check that this post has two comments
        2 should equal (frontPost.get.comments.size)
 
        // Post a new comment
        frontPost.get.addComment("Jim", "Hello guys")
        3 should equal (frontPost.get.comments.size)
        4 should equal (Comments.count())
}


h2. <a>Save your work</a>

We have now finished an huge part on the blog engine. With all this things created and tested, we can now start to develop the web application itself.

But before continuing, it's time to save your work in bazaar. Open a command line an type **bzr st** to see the modifications made since the latest commit:

bc. $ bzr st

As you can see, some new files are not under version control. The **test-result** folder doesn't need to be versioned, so let's ignore it.

bc. $ bzr ignore test-result

Add other files to version control using **bzr add**.

bc. $ bzr add

You can now commit your project.

bc. $ bzr commit -m "The model layer is ready"

p(note). Go to the "next part":scguide3. 
